{
  
    
        "post0": {
            "title": "Assignment 3",
            "content": "Pandas and plotting exercises . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . df = pd.read_csv(&#39;video_games.csv&#39;) pd.read_csv(&#39;video_games.csv&#39;) . Title Features.Handheld? Features.Max Players Features.Multiplatform? Features.Online? Metadata.Genres Metadata.Licensed? Metadata.Publishers Metadata.Sequel? Metrics.Review Score ... Length.Main + Extras.Average Length.Main + Extras.Leisure Length.Main + Extras.Median Length.Main + Extras.Polled Length.Main + Extras.Rushed Length.Main Story.Average Length.Main Story.Leisure Length.Main Story.Median Length.Main Story.Polled Length.Main Story.Rushed . 0 Super Mario 64 DS | True | 1 | True | True | Action | True | Nintendo | True | 85 | ... | 24.916667 | 29.966667 | 25.000000 | 16 | 18.333333 | 14.333333 | 18.316667 | 14.500000 | 21 | 9.700000 | . 1 Lumines: Puzzle Fusion | True | 1 | True | True | Strategy | True | Ubisoft | True | 89 | ... | 9.750000 | 9.866667 | 9.750000 | 2 | 9.616667 | 10.333333 | 11.083333 | 10.000000 | 3 | 9.583333 | . 2 WarioWare Touched! | True | 2 | True | True | Action,Racing / Driving,Sports | True | Nintendo | True | 81 | ... | 3.850000 | 5.666667 | 3.333333 | 11 | 2.783333 | 1.916667 | 2.933333 | 1.833333 | 30 | 1.433333 | . 3 Hot Shots Golf: Open Tee | True | 1 | True | True | Sports | True | Sony | True | 81 | ... | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | . 4 Spider-Man 2 | True | 1 | True | True | Action | True | Activision | True | 61 | ... | 12.766667 | 17.316667 | 12.500000 | 12 | 10.483333 | 8.350000 | 11.083333 | 8.000000 | 23 | 5.333333 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1207 Secret Files: Tunguska | True | 1 | True | True | Adventure | True | NaN | True | 71 | ... | 11.500000 | 11.750000 | 11.500000 | 2 | 11.250000 | 8.800000 | 12.566667 | 8.716667 | 16 | 6.816667 | . 1208 Fading Shadows | True | 1 | True | True | Action,Adventure | True | NaN | True | 62 | ... | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | . 1209 Hail to the Chimp | True | 1 | True | True | Action,Strategy | True | NaN | True | 51 | ... | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | . 1210 Secret Files: Tunguska | True | 2 | True | True | Adventure | True | NaN | True | 64 | ... | 11.500000 | 11.750000 | 11.500000 | 2 | 11.250000 | 8.800000 | 12.566667 | 8.716667 | 16 | 6.816667 | . 1211 Chicken Hunter | True | 1 | True | True | Action | True | NaN | True | 39 | ... | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0 | 0.000000 | . 1212 rows × 36 columns . rows, columns = df.shape print(&#39;# of rows =&#39;, rows) print(&#39;# of columns =&#39;, columns) . # of rows = 1212 # of columns = 36 . # What are the column names of the dataframe? column_names = list(df.columns) print(column_names) . [&#39;Title&#39;, &#39;Features.Handheld?&#39;, &#39;Features.Max Players&#39;, &#39;Features.Multiplatform?&#39;, &#39;Features.Online?&#39;, &#39;Metadata.Genres&#39;, &#39;Metadata.Licensed?&#39;, &#39;Metadata.Publishers&#39;, &#39;Metadata.Sequel?&#39;, &#39;Metrics.Review Score&#39;, &#39;Metrics.Sales&#39;, &#39;Metrics.Used Price&#39;, &#39;Release.Console&#39;, &#39;Release.Rating&#39;, &#39;Release.Re-release?&#39;, &#39;Release.Year&#39;, &#39;Length.All PlayStyles.Average&#39;, &#39;Length.All PlayStyles.Leisure&#39;, &#39;Length.All PlayStyles.Median&#39;, &#39;Length.All PlayStyles.Polled&#39;, &#39;Length.All PlayStyles.Rushed&#39;, &#39;Length.Completionists.Average&#39;, &#39;Length.Completionists.Leisure&#39;, &#39;Length.Completionists.Median&#39;, &#39;Length.Completionists.Polled&#39;, &#39;Length.Completionists.Rushed&#39;, &#39;Length.Main + Extras.Average&#39;, &#39;Length.Main + Extras.Leisure&#39;, &#39;Length.Main + Extras.Median&#39;, &#39;Length.Main + Extras.Polled&#39;, &#39;Length.Main + Extras.Rushed&#39;, &#39;Length.Main Story.Average&#39;, &#39;Length.Main Story.Leisure&#39;, &#39;Length.Main Story.Median&#39;, &#39;Length.Main Story.Polled&#39;, &#39;Length.Main Story.Rushed&#39;] . . # What are the datatypes of each column? # dtypes print(df.dtypes) # for column in range(columns): # data = df.iloc[0][column] # print(column_names[column] + &#39; : &#39; + str(type(data))) # for column in df.rows[0]: # print(column + &#39; : &#39; + str(type(column))) . Title object Features.Handheld? bool Features.Max Players int64 Features.Multiplatform? bool Features.Online? bool Metadata.Genres object Metadata.Licensed? bool Metadata.Publishers object Metadata.Sequel? bool Metrics.Review Score int64 Metrics.Sales float64 Metrics.Used Price float64 Release.Console object Release.Rating object Release.Re-release? bool Release.Year int64 Length.All PlayStyles.Average float64 Length.All PlayStyles.Leisure float64 Length.All PlayStyles.Median float64 Length.All PlayStyles.Polled int64 Length.All PlayStyles.Rushed float64 Length.Completionists.Average float64 Length.Completionists.Leisure float64 Length.Completionists.Median float64 Length.Completionists.Polled int64 Length.Completionists.Rushed float64 Length.Main + Extras.Average float64 Length.Main + Extras.Leisure float64 Length.Main + Extras.Median float64 Length.Main + Extras.Polled int64 Length.Main + Extras.Rushed float64 Length.Main Story.Average float64 Length.Main Story.Leisure float64 Length.Main Story.Median float64 Length.Main Story.Polled int64 Length.Main Story.Rushed float64 dtype: object . . #collapse-output # Look at the first 2 rows of the dataframe # row1 = df.iloc[0] # row2 = df.iloc[1] # print(row1) # print(row2) df.head(2) # Look at the last 2 rows of the dataframe # second_last_row = df.iloc[rows-2] # last_row = df.iloc[rows-1] # print(second_last_row) # print(last_row) df.tail(2) . . Title Features.Handheld? Features.Max Players Features.Multiplatform? Features.Online? Metadata.Genres Metadata.Licensed? Metadata.Publishers Metadata.Sequel? Metrics.Review Score ... Length.Main + Extras.Average Length.Main + Extras.Leisure Length.Main + Extras.Median Length.Main + Extras.Polled Length.Main + Extras.Rushed Length.Main Story.Average Length.Main Story.Leisure Length.Main Story.Median Length.Main Story.Polled Length.Main Story.Rushed . 1210 Secret Files: Tunguska | True | 2 | True | True | Adventure | True | NaN | True | 64 | ... | 11.5 | 11.75 | 11.5 | 2 | 11.25 | 8.8 | 12.566667 | 8.716667 | 16 | 6.816667 | . 1211 Chicken Hunter | True | 1 | True | True | Action | True | NaN | True | 39 | ... | 0.0 | 0.00 | 0.0 | 0 | 0.00 | 0.0 | 0.000000 | 0.000000 | 0 | 0.000000 | . 2 rows × 36 columns . df.describe() . Features.Max Players Metrics.Review Score Metrics.Sales Metrics.Used Price Release.Year Length.All PlayStyles.Average Length.All PlayStyles.Leisure Length.All PlayStyles.Median Length.All PlayStyles.Polled Length.All PlayStyles.Rushed ... Length.Main + Extras.Average Length.Main + Extras.Leisure Length.Main + Extras.Median Length.Main + Extras.Polled Length.Main + Extras.Rushed Length.Main Story.Average Length.Main Story.Leisure Length.Main Story.Median Length.Main Story.Polled Length.Main Story.Rushed . count 1212.000000 | 1212.000000 | 1212.00000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | ... | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | . mean 1.658416 | 68.828383 | 0.50316 | 17.393894 | 2006.820132 | 13.653177 | 26.250426 | 11.225371 | 44.415842 | 9.396163 | ... | 12.731491 | 18.866048 | 12.103548 | 13.995875 | 10.319788 | 8.465952 | 11.051966 | 8.280941 | 24.882838 | 6.974697 | . std 1.204377 | 12.956266 | 1.06985 | 5.018972 | 1.050653 | 19.397156 | 51.598941 | 13.493717 | 154.837893 | 11.176371 | ... | 23.979610 | 42.917021 | 23.355374 | 57.333257 | 20.895117 | 9.691745 | 14.092617 | 9.502600 | 87.382770 | 7.964522 | . min 1.000000 | 19.000000 | 0.01000 | 4.950000 | 2004.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 1.000000 | 60.000000 | 0.09000 | 14.950000 | 2006.000000 | 3.562500 | 4.000000 | 3.025000 | 1.000000 | 2.600000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 50% 1.000000 | 70.000000 | 0.21000 | 17.950000 | 2007.000000 | 8.858333 | 12.000000 | 8.000000 | 6.000000 | 6.708333 | ... | 7.291667 | 8.000000 | 7.000000 | 1.000000 | 6.283333 | 6.575000 | 8.000000 | 6.041667 | 3.000000 | 5.341667 | . 75% 2.000000 | 79.000000 | 0.46000 | 17.950000 | 2008.000000 | 16.033333 | 27.600000 | 13.783333 | 25.000000 | 11.366667 | ... | 16.112500 | 21.033333 | 15.000000 | 7.000000 | 12.941667 | 11.033333 | 14.508333 | 10.533333 | 14.000000 | 9.312500 | . max 8.000000 | 98.000000 | 14.66000 | 49.950000 | 2008.000000 | 279.733333 | 476.266667 | 126.000000 | 2300.000000 | 120.200000 | ... | 291.000000 | 478.933333 | 291.000000 | 1100.000000 | 291.000000 | 72.383333 | 135.583333 | 70.000000 | 1100.000000 | 70.000000 | . 8 rows × 25 columns . df.Title . 0 Super Mario 64 DS 1 Lumines: Puzzle Fusion 2 WarioWare Touched! 3 Hot Shots Golf: Open Tee 4 Spider-Man 2 ... 1207 Secret Files: Tunguska 1208 Fading Shadows 1209 Hail to the Chimp 1210 Secret Files: Tunguska 1211 Chicken Hunter Name: Title, Length: 1212, dtype: object . review_scores = df[&#39;Metrics.Review Score&#39;] review_scores.plot() . &lt;AxesSubplot:&gt; . # print(review_scores.loc[:10]) print(review_scores.loc[:9]) . 0 85 1 89 2 81 3 81 4 61 5 67 6 88 7 75 8 68 9 46 Name: Metrics.Review Score, dtype: int64 . # as well as the matching 10 elements of a different column that has interesting text first_10 = review_scores.loc[:9] print(first_10) titles = df[&#39;Title&#39;].loc[:9] print(titles) . 0 85 1 89 2 81 3 81 4 61 5 67 6 88 7 75 8 68 9 46 Name: Metrics.Review Score, dtype: int64 0 Super Mario 64 DS 1 Lumines: Puzzle Fusion 2 WarioWare Touched! 3 Hot Shots Golf: Open Tee 4 Spider-Man 2 5 The Urbz: Sims in the City 6 Ridge Racer 7 Metal Gear Ac!d 8 Madden NFL 2005 9 Pokmon Dash Name: Title, dtype: object . # and make a bar plot with the text values horizontally and the numeric values as the bar heights title_score = df.loc[[0,1,2,3,4,5,6,7,8,9],[&#39;Title&#39;,&#39;Metrics.Review Score&#39;]] title_score.plot(kind=&#39;bar&#39;, x=&#39;Title&#39;) . &lt;AxesSubplot:xlabel=&#39;Title&#39;&gt; . title_score.plot(kind=&#39;barh&#39;, x=&#39;Title&#39;) . &lt;AxesSubplot:ylabel=&#39;Title&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) title_score_plot = title_score.plot(kind=&#39;barh&#39;, x=&#39;Title&#39;) title_score_plot.set_title(&quot;Review Score of 10 Video Games&quot;, color=&#39;purple&#39;) title_score_plot.set_xlabel(&#39;Review Score&#39;,fontsize=14, color=&#39;red&#39;) title_score_plot.set_ylabel(&#39;Video Game Title&#39;,fontsize=14, color=&#39;yellow&#39;) . Text(0, 0.5, &#39;Video Game Title&#39;) . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . For annotating bar chart . max_play_per_year_dict = {2004: [&#39;Metal Gear Acid&#39;, 25.383333333333333], 2005: [&#39;Animal Crossing: Wild World&#39;, 168.96666666666667], 2006: [&#39;Monster Hunter Freedom&#39;, 279.73333333333335], 2007: [&#39;Monster Hunter Freedom 2&#39;, 136.01666666666668], 2008: [&#39;Animal Crossing: City Folk&#39;, 191.25]} max_play_per_year_df = pd.DataFrame(max_play_per_year_dict) pd.DataFrame(max_play_per_year_dict) # df.iloc[1].apply(int) max_play_game_list = [] year_list = [] year = 2004 for pair in max_play_per_year_dict.values(): pair_list = [pair[0], pair[1]] year_list.append(year) pair_list_year = [pair[0], pair[1], year] max_play_game_list.append(pair_list) year += 1 clean_data_frame = pd.DataFrame(max_play_game_list, columns=[&#39;game&#39;, &#39;max play&#39;]) print(clean_data_frame) ax = clean_data_frame.plot(kind=&#39;bar&#39;, x=&#39;game&#39;) for index, p in enumerate(ax.patches): ax.annotate(str(year_list[index]), (p.get_x() * 1.005, p.get_height() * 1.005)) # practice doing the color depending on the year . game max play 0 Metal Gear Acid 25.383333 1 Animal Crossing: Wild World 168.966667 2 Monster Hunter Freedom 279.733333 3 Monster Hunter Freedom 2 136.016667 4 Animal Crossing: City Folk 191.250000 . console_game_over90_dict = { &#39;Nintendo DS&#39;: [[&#39;Mario Kart DS&#39;, 91], [&#39;Advance Wars: Dual Strike&#39;, 90], [&#39;The Legend of Zelda: Phantom Hourglass&#39;, 90], [&#39;Chrono Trigger&#39;, 92]], &#39;X360&#39;: [[&#39;Gears of War&#39;, 94], [&#39;The Elder Scrolls IV: Oblivion&#39;, 94], [&quot;Tom Clancy&#39;s Ghost Recon: Advanced Warfighter&quot;, 90], [&#39;Halo 3&#39;, 94], [&#39;Call of Duty 4: Modern Warfare&#39;, 94], [&#39;Forza Motorsport 2&#39;, 90], [&#39;Guitar Hero II&#39;, 92], [&#39;Rock Band&#39;, 92], [&#39;Mass Effect&#39;, 91], [&#39;BioShock&#39;, 96], [&#39;The Orange Box&#39;, 96], [&#39;Grand Theft Auto IV&#39;, 98], [&#39;Gears of War 2&#39;, 93], [&#39;Fallout 3&#39;, 93], [&#39;Rock Band 2&#39;, 92]], &#39;Nintendo Wii&#39;: [[&#39;The Legend of Zelda: Twilight Princess&#39;, 95], [&#39;Super Mario Galaxy&#39;, 97], [&#39;Resident Evil 4&#39;, 91], [&#39;Metroid Prime 3: Corruption&#39;, 90], [&#39;Super Smash Bros.: Brawl&#39;, 93], [&#39;Rock Band&#39;, 92], [&#39;?kami&#39;, 90]], &#39;PlayStation 3&#39;: [[&#39;Call of Duty 4: Modern Warfare&#39;, 94], [&#39;The Elder Scrolls IV: Oblivion&#39;, 93], [&#39;Rock Band&#39;, 92], [&#39;Grand Theft Auto IV&#39;, 98], [&#39;Metal Gear Solid 4: Guns of the Patriots&#39;, 94], [&#39;LittleBigPlanet&#39;, 95], [&#39;Fallout 3&#39;, 90], [&#39;Rock Band 2&#39;, 91], [&#39;BioShock&#39;, 94]], &#39;Sony PSP&#39;: [[&#39;God of War: Chains of Olympus&#39;, 91]]} game_score_pair_list = [] game_score_console_list = [] console_game_dict = {} for console in console_game_over90_dict: for game_score_pair in console_game_over90_dict[console]: new_list = [game_score_pair[0], game_score_pair[1], console] game_score_console_list.append(new_list) game_score_pair_list.append(game_score_pair) if console not in console_game_dict: console_game_dict[console] = [game_score_pair[0]] else: console_game_dict[console].append(game_score_pair[0]) # print(game_score_pair_list) # print(console_game_over90_dict.values()) console_game_console_over90_df = pd.DataFrame(game_score_console_list, columns=[&#39;game&#39;, &#39;review score&#39;, &#39;console&#39;]) # console_game_console_over90_plot = console_game_console_over90_df.groupby(&#39;console&#39;).plot(kind=&#39;barh&#39;, x=&#39;game&#39;, y=&#39;review score&#39;) for title, group in console_game_console_over90_df.groupby(&#39;console&#39;): group.plot(kind=&#39;barh&#39;, x=&#39;game&#39;, y=&#39;review score&#39;, title=title) # console_game_console_over90_plot.set_title(str(console) + &#39;games over 90 review score&#39;, color=&#39;purple&#39;) # print(console_game_over90_df) # game_score_plot = console_game_over90_df.plot(kind=&#39;barh&#39;, x=&#39;game&#39;, figsize=(12,12)) . . from matplotlib.patches import Patch console_game_over90_df = pd.DataFrame(game_score_pair_list, columns=[&#39;game&#39;, &#39;review score&#39;]) # print(console_game_over90_df) barcolors = [] for i in console_game_over90_df.index: if str(console_game_over90_df.loc[i,&#39;game&#39;]) in console_game_dict[&#39;Nintendo DS&#39;]: barcolors.append(&#39;blue&#39;) elif str(console_game_over90_df.loc[i,&#39;game&#39;]) in console_game_dict[&#39;Sony PSP&#39;]: barcolors.append(&#39;red&#39;) elif str(console_game_over90_df.loc[i,&#39;game&#39;]) in console_game_dict[&#39;X360&#39;]: barcolors.append(&#39;green&#39;) console_game_dict[&#39;X360&#39;].remove(str(console_game_over90_df.loc[i,&#39;game&#39;])) elif str(console_game_over90_df.loc[i,&#39;game&#39;]) in console_game_dict[&#39;Nintendo Wii&#39;]: barcolors.append(&#39;gray&#39;) console_game_dict[&#39;Nintendo Wii&#39;].remove(str(console_game_over90_df.loc[i,&#39;game&#39;])) elif str(console_game_over90_df.loc[i,&#39;game&#39;]) in console_game_dict[&#39;PlayStation 3&#39;]: barcolors.append(&#39;black&#39;) colours = {&quot;Nintendo DS&quot;: &quot;blue&quot;, &quot;X360&quot;: &quot;green&quot;, &quot;Nintendo Wii&quot;: &quot;gray&quot;, &quot;PlayStation 3&quot;: &quot;black&quot;, &quot;Sony PSP&quot;: &quot;red&quot;} console_game_over90_plot = console_game_over90_df.plot(kind=&#39;bar&#39;, x=&#39;game&#39;, y=&#39;review score&#39;, figsize=(12,12), color=barcolors) console_game_over90_plot.legend( [ Patch(facecolor=colours[&#39;Nintendo DS&#39;]), Patch(facecolor=colours[&#39;Nintendo Wii&#39;]), Patch(facecolor=colours[&#39;PlayStation 3&#39;]), Patch(facecolor=colours[&#39;Sony PSP&#39;]), Patch(facecolor=colours[&#39;X360&#39;]) ], [&quot;Nintendo DS&quot;, &quot;Nintendo Wii&quot;, &quot;PlayStation 3&quot;, &quot;Sony PSP&quot;, &quot;X360&quot;] ) print(console_game_over90_df.loc[0,&#39;game&#39;]) print(console_game_dict[&#39;Nintendo DS&#39;]) print(barcolors) . Mario Kart DS [&#39;Mario Kart DS&#39;, &#39;Advance Wars: Dual Strike&#39;, &#39;The Legend of Zelda: Phantom Hourglass&#39;, &#39;Chrono Trigger&#39;] [&#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;green&#39;, &#39;gray&#39;, &#39;gray&#39;, &#39;gray&#39;, &#39;gray&#39;, &#39;gray&#39;, &#39;gray&#39;, &#39;gray&#39;, &#39;black&#39;, &#39;black&#39;, &#39;black&#39;, &#39;black&#39;, &#39;black&#39;, &#39;black&#39;, &#39;black&#39;, &#39;black&#39;, &#39;black&#39;, &#39;red&#39;] . for title, group in console_game_console_over90_df.groupby(&#39;console&#39;): group.plot.hist(title=title) . . console_game_console_over90_df.plot.hist() . &lt;AxesSubplot:ylabel=&#39;Frequency&#39;&gt; .",
            "url": "https://make-a-mark.github.io/dh140_assignment9_blog/2022/03/06/assignment03.html",
            "relUrl": "/2022/03/06/assignment03.html",
            "date": " • Mar 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://make-a-mark.github.io/dh140_assignment9_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://make-a-mark.github.io/dh140_assignment9_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://make-a-mark.github.io/dh140_assignment9_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://make-a-mark.github.io/dh140_assignment9_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}